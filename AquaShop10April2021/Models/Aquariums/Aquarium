using AquaShop.Models.Aquariums.Contracts;
using AquaShop.Models.Decorations.Contracts;
using AquaShop.Models.Fish.Contracts;
using AquaShop.Utilities.Messages;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace AquaShop.Models.Aquariums
{
    public abstract class Aquarium : IAquarium
    {
        private string name;
        private int capacity;
        private ICollection<IDecoration> decorations;
        private ICollection<IFish> fishCollection;
        public Aquarium(string name, int capacity)
        {
            Name = name;
            Capacity = capacity;
            decorations = new HashSet<IDecoration>();
            fishCollection = new HashSet<IFish>();
        }
        public string Name
        {
            get { return name; }
            private set
            {
                if (string.IsNullOrWhiteSpace(value))
                {
                    throw new ArgumentException(ExceptionMessages.InvalidAquariumName);
                }

                name = value;
            }
        }


        public int Capacity
        {
            get { return capacity; }
            private set { capacity = value; }
        }
        public int Comfort => decorations.Sum(x => x.Comfort);
        public ICollection<IDecoration> Decorations => decorations;
        public ICollection<IFish> Fish => fishCollection;

        public void AddDecoration(IDecoration decoration)
        {
            
            decorations.Add(decoration);
        }

        public void AddFish(IFish fish)
        {
            if (fishCollection.Count == Capacity)
            {
                throw new InvalidOperationException(ExceptionMessages.NotEnoughCapacity);
            }
            fishCollection.Add(fish);
        }

        public void Feed()
        {
            foreach (var fish in fishCollection)
            {
                fish.Eat();
            }
        }

        public string GetInfo()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"{Name} ({this.GetType().Name}):");

            string fishToPrint = fishCollection.Count > 0 ?
                string.Join(", ", fishCollection.Select(x => x.Name)) :
                "none";

            sb.AppendLine($"Fish: {fishToPrint}");
            sb.AppendLine($"Decorations: {decorations.Count}");
            sb.AppendLine($"Comfort: {Comfort}");

            return sb.ToString().Trim();
        }

        public bool RemoveFish(IFish fish)
        {
            return fishCollection.Remove(fish);
        }
    }
}
