    using SpaceStation.Core.Contracts;
using SpaceStation.Models.Astronauts;
using SpaceStation.Models.Astronauts.Contracts;
using SpaceStation.Models.Mission;
using SpaceStation.Models.Mission.Contracts;
using SpaceStation.Models.Planets;
using SpaceStation.Models.Planets.Contracts;
using SpaceStation.Repositories;
using SpaceStation.Repositories.Contracts;
using SpaceStation.Utilities.Messages;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SpaceStation.Core
{
    public class Controller : IController
    {
        private IRepository<IAstronaut> astronauts;
        private IRepository<IPlanet> planets;
        private int planetsExplored;
        public Controller()
        {
            astronauts = new AstronautRepository();
            planets = new PlanetRepository();
        }
        public string AddAstronaut(string type, string astronautName)
        {
            IAstronaut astro;
            if (type == nameof(Geodesist))
            {
                astro = new Geodesist(astronautName);
            }
            else if (type == nameof(Biologist))
            {
                astro = new Biologist(astronautName);
            }
            else if (type == nameof(Meteorologist))
            {
                astro = new Meteorologist(astronautName);
            }
            else
            {
                throw new InvalidOperationException(ExceptionMessages.InvalidAstronautType);
            }

            astronauts.Add(astro);

            return
                String.Format(OutputMessages.AstronautAdded, type, astronautName);
        }

        public string AddPlanet(string planetName, params string[] items)
        {
            IPlanet planet = new Planet(planetName);

            foreach (var item in items)
            {
                planet.Items.Add(item);
            }

            planets.Add(planet);

            return
                String.Format(OutputMessages.PlanetAdded, planetName);
        }

        public string ExplorePlanet(string planetName)
        {
            var targetPlanet = planets.FindByName(planetName);
            var availableAstronauts = astronauts.Models.Where(x => x.Oxygen >= 60).ToList();
            IMission mission = new Mission();

            if (!availableAstronauts.Any())
            {
                throw new InvalidOperationException(ExceptionMessages.InvalidAstronautCount);
            }

            mission.Explore(targetPlanet, availableAstronauts);

            var deadAstrounauts = availableAstronauts.Where(x => x.Oxygen == 0).ToList().Count;

            planetsExplored++;
            return String.Format(OutputMessages.PlanetExplored, planetName, deadAstrounauts);
        }

        public string Report()
        {
            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"{planetsExplored} planets were explored!");
            sb.AppendLine("Astronauts info:");
            foreach (var astro in astronauts.Models)
            {
                sb.AppendLine(astro.ToString());
            }

            return sb.ToString().Trim();
        }

        public string RetireAstronaut(string astronautName)
        {
            if (astronauts.FindByName(astronautName) == null)
            {
                throw new InvalidOperationException(String.Format(ExceptionMessages.InvalidRetiredAstronaut, astronautName));
            }

            astronauts.Remove(astronauts.FindByName(astronautName));
            return
                String.Format(OutputMessages.AstronautRetired, astronautName);
        }
    }
}
