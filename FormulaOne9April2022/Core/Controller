using Formula1.Core.Contracts;
using Formula1.Models;
using Formula1.Models.Contracts;
using Formula1.Repositories;
using Formula1.Repositories.Contracts;
using Formula1.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Formula1.Core
{
    public class Controller : IController
    {
        private IRepository<IPilot> pilots;
        private IRepository<IRace> races;
        private IRepository<IFormulaOneCar> cars;
        public Controller()
        {
            pilots = new PilotRepository();
            races = new RaceRepository();
            cars = new FormulaOneCarRepository();
        }
        public string CreatePilot(string fullName)
        {
            if (pilots.FindByName(fullName) != null)
            {
                throw new InvalidOperationException(string.Format(ExceptionMessages
                    .PilotExistErrorMessage, fullName));
            }

            IPilot pilot = new Pilot(fullName);
            pilots.Add(pilot);

            return
                String.Format(OutputMessages.SuccessfullyCreatePilot, fullName);
        }
        public string CreateCar(string type, string model, int horsepower, double engineDisplacement)
        {
            if (cars.FindByName(model) != null)
            {
                throw new InvalidOperationException(
                    String.Format(ExceptionMessages.CarExistErrorMessage, model));
            }

            IFormulaOneCar car;
            if (type == nameof(Williams))
            {
                car = new Williams(model, horsepower, engineDisplacement);
            }
            else if (type == nameof(Ferrari))
            {
                car = new Ferrari(model, horsepower, engineDisplacement);
            }
            else
            {
                throw new
                    InvalidOperationException(string.Format(ExceptionMessages.InvalidTypeCar, type));
            }

            cars.Add(car);
            return
                String.Format(OutputMessages.SuccessfullyCreateCar, type, model);
        }
        public string CreateRace(string raceName, int numberOfLaps)
        {
            if (races.FindByName(raceName) != null)
            {
                throw new InvalidOperationException(String.Format(
                    ExceptionMessages.RaceExistErrorMessage, raceName));
            }

            IRace race = new Race(raceName, numberOfLaps);
            races.Add(race);

            return String.Format(OutputMessages.SuccessfullyCreateRace, raceName);
        }
        public string AddCarToPilot(string pilotName, string carModel)
        {
            if (this.pilots.FindByName(pilotName) == null || this.pilots.FindByName(pilotName).Car != null)
            {
                throw new
                    InvalidOperationException(
                    String.Format(ExceptionMessages.PilotDoesNotExistOrHasCarErrorMessage, pilotName));
            }
            if (this.cars.FindByName(carModel) == null)
            {
                throw new NullReferenceException(String.Format(
                   ExceptionMessages.CarDoesNotExistErrorMessage, carModel));
            }
            string carType = this.cars.FindByName(carModel).GetType().Name;
            this.pilots.FindByName(pilotName).AddCar(this.cars.FindByName(carModel));
            this.cars.Remove(this.cars.FindByName(carModel));

            return
                String.Format(OutputMessages.SuccessfullyPilotToCar, pilotName, carType, carModel);
        }

        public string AddPilotToRace(string raceName, string pilotFullName)
        {

            if (this.races.FindByName(raceName) == null)
            {
                throw new NullReferenceException(String.Format(
                    ExceptionMessages.RaceDoesNotExistErrorMessage, raceName));
            }

            IPilot pilot = pilots.FindByName(pilotFullName);

            if (pilot == null ||
                pilot.CanRace == false ||
                this.races.FindByName(raceName).Pilots.Any(x => x == pilot))
            {
                throw new InvalidOperationException(String.Format(
                    ExceptionMessages.PilotDoesNotExistErrorMessage, pilotFullName));
            }

            this.races.FindByName(raceName).AddPilot(pilot);

            return
                String.Format(OutputMessages.SuccessfullyAddPilotToRace, pilotFullName, raceName);
        }
        public string StartRace(string raceName)
        {
            var race = this.races.FindByName(raceName);

            if (race == null)
            {
                throw new NullReferenceException(String.Format(
                    ExceptionMessages.RaceDoesNotExistErrorMessage, raceName));
            }
            if (race.Pilots.Count < 3)
            {
                throw new InvalidOperationException(String.Format(
                    ExceptionMessages.InvalidRaceParticipants, raceName));
            }
            if (race.TookPlace)
            {
                throw new InvalidOperationException(
                    String.Format(ExceptionMessages.RaceTookPlaceErrorMessage, raceName));
            }

            var fastestPilots = race.Pilots
                .OrderByDescending(x => x.Car.RaceScoreCalculator(race.NumberOfLaps))
                .Take(3).ToList();

            StringBuilder sb = new StringBuilder();

            sb.AppendLine($"Pilot {fastestPilots[0].FullName} wins the {raceName} race.")
                .AppendLine($"Pilot {fastestPilots[1].FullName} is second in the {raceName} race.")
                .AppendLine($"Pilot {fastestPilots[2].FullName} is third in the {raceName} race.");

            race.TookPlace = true;
            fastestPilots[0].WinRace();

            return sb.ToString().Trim();
        }

        public string RaceReport()
        {
            StringBuilder sb = new StringBuilder();

            foreach (var race in races.Models.Where(x =>x.TookPlace == true))
            {
                sb.AppendLine(race.RaceInfo());
            }

            return sb.ToString().Trim();
        }

        public string PilotReport()
        {
            StringBuilder sb = new StringBuilder();
            foreach (var pilot in pilots.Models.OrderByDescending(x =>x.NumberOfWins))
            {
                sb.AppendLine(pilot.ToString());
            }

            return sb.ToString().Trim();
        }


    }
}
